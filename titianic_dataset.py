# -*- coding: utf-8 -*-
"""Titianic_dataset.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1XLEPCNRWeV272xiVYVjyj6IcDtNz_-bS

# **Titanic dataset exploratory data analysis project**

<table align="center">
  
  <td align="center"><a target="_blank" href="https://colab.research.google.com/drive/1XLEPCNRWeV272xiVYVjyj6IcDtNz_-bS?authuser=2#scrollTo=z4dRflLHktDV">
        <img src="https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcTR7EtP27gljpJg91k2DVoRgkB84hkMl78bOA&usqp=CAU""  style="padding-bottom:5px;" />
        
  Run this project in Google Colab</a></td>
  
</table>
"""

!wget https://raw.githubusercontent.com/gmashik/Exploratory_data_Analysis_project/master/my_utils.py

!pip install squarify

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import cufflinks as cf
import datetime
from datetime import date
import pandas as pd
import numpy as np
from plotly import __version__
# %matplotlib inline
import squarify
import plotly.offline as pyo
import plotly.graph_objs as go
from plotly.offline import iplot
from my_utils import *
import cufflinks as cf
from plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot

!wget https://raw.githubusercontent.com/gmashik/Exploratory_data_Analysis_project/master/Titanic_dataset/titanic_train.csv
!wget https://raw.githubusercontent.com/gmashik/Exploratory_data_Analysis_project/master/Titanic_dataset/titanic_test.csv

train_data=pd.read_csv("titanic_train.csv")
test_data=pd.read_csv("titanic_test.csv")

"""**Overview of the data_set**"""

test_data.head(5)

train_data.describe().T

train_data.info()

"""* **Survival**	: 0 = No, 1 = Yes 
* **Pclass** : Ticket class	1 = 1st, 2 = 2nd, 3 = 3rd
* **Sex** : Sex	 Male or Female
* **Age** : Age in years	
* **Sibsp** : number of siblings / spouses aboard the Titanic	
* **Parch** : number of parents / children aboard the Titanic	
* **Ticket** : Ticket number	
* **Fare** : Passenger fare	
* **Cabin** : Cabin number	
* **Embarked** : Port of Embarkation	C = Cherbourg, Q = Queenstown, S = Southampton
* **Type** : train or test

Take all data for exploratory data Analysis. So we will merge all the data
"""

data = train_data.append(test_data)
data.head()

data.shape

"""# **Exploratory Data Anlysis Section**"""

#Check for missing data
sns.heatmap(train_data.isnull(),cmap='viridis',cbar=False,yticklabels=False)

"""**We can see that a few data is missing in the Age column and a lots of data is missing in the cabin column. We are going to take care on this**"""

data.columns

num=[]
cls=[]
for i in range(len(data.columns)):
  temp=data[data.columns[i]].isnull().sum(axis=0)
  num.append(temp)
  cls.append(data.columns[i])

mdata=pd.DataFrame(list(zip(cls, num)),index=None,columns=["Class","Missing Value"])
mdata.head()

configure_plotly_browser_state()
trace = go.Bar(x = mdata['Class'], y =mdata['Missing Value'],opacity = 0.8,  textposition = 'auto',marker=dict(color = '#7EC0EE',
            line=dict(color='#000000',width=1.5)))

fig = dict(data = [trace])
pyo.iplot(fig)

mdata1=pd.DataFrame(num,index=data.columns,columns=["Missing Value"])
mdata1.head()
mdata1.plot.pie(y='Missing Value',figsize=(6,6))

configure_plotly_browser_state()
trace = go.Pie(labels = data.columns, values = mdata['Missing Value'], 
               textfont=dict(size=15), opacity = 0.8)


layout = dict(title =  'Missing Data percentage',
                        autosize = True,
                        height  = 500,
                        width   = 750)
           
fig = dict(data = [trace], layout=layout)
pyo.iplot(fig)

"""Age distribution"""

configure_plotly_browser_state()
train_data['Age'].iplot(kind='hist', xTitle='Age',yTitle='Number of people ', title='Age distribution')

sns.countplot(x='Survived',data=train_data)

"""**We can see the percentage from the pie chart below**"""

configure_plotly_browser_state()
trace = go.Pie(labels = ['Died', 'Survived'], values = data['Survived'].value_counts(), 
               textfont=dict(size=15), opacity = 0.8,
               marker=dict(colors=['blue', 'orange'], 
                           line=dict(color='#000000', width=1.5)))


layout = dict(title =  'Survival percentage',
                        autosize = True,
                        height  = 500,
                        width   = 750)
           
fig = dict(data = [trace], layout=layout)
pyo.iplot(fig)

configure_plotly_browser_state()
import plotly.express as px
df = px.data.tips()
fig = px.bar(train_data, x="Survived")
fig.show()



"""**It seems more people didn't survive. Let's check the survival in terms of sex and different passenger class.**"""

sns.countplot(x='Survived',data=train_data,hue="Sex")

"""**Female survived more....**"""

sns.countplot(x='Survived',data=train_data,hue="Pclass")

"""Make this this more interactive"""

import plotly.offline as py
py.init_notebook_mode(connected=True)
import plotly.graph_objs as go
import plotly.tools as tls
import warnings
configure_plotly_browser_state()
atributes= train_data.groupby('Pclass')['Survived']
cols = ['0','1']
atributes.columns = cols
atributes.head(5)
trace1 = go.Bar(
    y=list(atributes.iloc[1]),
    x=atributes.columns.values,
    name='Men',
    marker=dict(
        color='darkblue'
    )
)
trace2 = go.Bar(
    y=list(atributes_gender.iloc[0]),
    x=atributes_gender.columns.values,
    name='Women',
    marker=dict(
        color='pink'
    )
)

data = [trace1, trace2]
layout = go.Layout(
    title='What People Are Looking For in the Opposite Sex',
    font=dict(
        size=16
    ),
    legend=dict(
        font=dict(
            size=16
        )
    )
)
fig = go.Figure(data=data, layout=layout)
py.iplot(fig, filename='barchart')

df=pd.read_csv("titanic_train.csv")
df[['Survived']] = train_data[['Survived']].astype('float64', copy=False)
configure_plotly_browser_state()
df.iplot(kind='bubble', x="Fare",y="Age",categories="Survived", size='Pclass', text='Name', xTitle='Fare', yTitle='Age')

class1 = train_data[train_data['Pclass']==1]['Pclass'].value_counts()
class2 = train_data[train_data['Pclass']==2]['Pclass'].value_counts()
class1 = train_data[train_data['Pclass']==3]['Pclass'].value_counts()
dead_sex = df[df['Survived']==0]['Sex'].value_counts()
df1 = pd.DataFrame([survived_sex,dead_sex])
df1.index = ['Survived','Dead']
df1.iplot(kind='bar',barmode='stack', title='Survival by the Sex')

"""The upper class people survived more."""

sns.distplot(train_data['Age'].dropna(),bins=30,kde=False)

"""The number of children and older are less compared to the middle and young age people"""

sns.countplot(x=train_data['SibSp'])

"""Most people in board is neither a spose or children of others"""



configure_plotly_browser_state()
train_data['Fare'].iplot(kind='hist',bins=100)
plt.show()

"""Below is the interactive histogram plot of age distribution"""

configure_plotly_browser_state()
train_data['Age'].iplot(kind='hist',bins=50)

"""### **Before going into deeper we are going to o a little bit feature engineering**

We will handle our missing data in this section
"""

sns.heatmap(data.isnull(),yticklabels=False,cbar=False)

sns.heatmap(train_data.isnull(),yticklabels=False,cbar=False)

plt.figure(figsize=(8,8))
sns.boxplot(x='Pclass',y='Age',data=train_data)

def impute_age(cols):
  Age=cols[0]
  Pclass=cols[1]
  if pd.isnull(Age):
    if Pclass==1:
      return 38
    elif Pclass==2:
      return 29
    else:
      return 22
  else:
    return Age

train_data['Age']=train_data[['Age','Pclass']].apply(impute_age,axis=1)

sns.heatmap(train_data.isnull(),yticklabels=False,cbar=False)

train_data.drop('Cabin',axis=1,inplace=True)

train_data.head()

sns.heatmap(train_data.isnull(),yticklabels=False,cbar=False)

num=[]
cls=[]
for i in range(len(train_data.columns)):
  temp=train_data[train_data.columns[i]].isnull().sum(axis=0)
  num.append(temp)
  cls.append(data.columns[i])
pd.DataFrame(num,index=train_data.columns)

train_data.dropna(inplace=True)

num=[]
cls=[]
for i in range(len(train_data.columns)):
  temp=train_data[train_data.columns[i]].isnull().sum(axis=0)
  num.append(temp)
  cls.append(data.columns[i])
pd.DataFrame(num,index=train_data.columns)

test_data['Age']=test_data[['Age','Pclass']].apply(impute_age,axis=1)
test_data.drop('Cabin',axis=1,inplace=True)
test_data.dropna(inplace=True)
num=[]
cls=[]
for i in range(len(test_data.columns)):
  temp=test_data[test_data.columns[i]].isnull().sum(axis=0)
  num.append(temp)
  cls.append(test_data.columns[i])
pd.DataFrame(num,index=test_data.columns)
test_data['male']=test_data['Sex'].apply(conv_sex)
test_data['S']=test_data['Embarked'].apply(con_es)
test_data['C']=test_data['Embarked'].apply(con_ec)
test_data['Q']=test_data['Embarked'].apply(con_eq)

"""**No missing value now. So go ahead for further processing. Text data will be converted to somethig else. We will write our function to convert text data (Sex and Embarked column) to numerical data.**"""

def conv_sex(col):
  if (col=='male'):
    return 1.0
  else: 
    return 0.0
def con_es(col):
  if (col=='S'):
    return 1.0
  else:
    return 0.0
def con_ec(col):
  if (col=='C'):
    return 1.0
  else:
    return 0.0
def con_eq(col):
  if (col=='Q'):
    return 1.0
  else:
    return 0.0